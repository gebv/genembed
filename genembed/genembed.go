package main

import (
	"bufio"
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"syscall"
	"text/template"

	"github.com/gebv/go-embed/file"
	"github.com/pkg/errors"
)

func main() {
	flag.Parse()
	args := flag.Args()
	if len(args) == 0 {
		fmt.Println("invalid arguments")
		os.Exit(1)
	}

	if len(args) == 1 {
		fmt.Println("nothing to embeded")
		os.Exit(1)
	}

	fieldName := args[0]
	pkgName := os.Getenv("GOPACKAGE")

	filename := pkgName + "_genembed.go"

	err := prepareDstFile(filename, embededFileConfig{
		Package:   pkgName,
		FieldName: fieldName,
	})
	if err != nil {
		fmt.Println("failed prepare dst file:", err)
		os.Exit(1)
	}

	dst, err := file.OpenFile(filename)
	if err != nil {
		fmt.Println("failed open dst file:", err)
		os.Exit(1)
	}
	defer dst.Close()
	defer gofmt(filename)

	for _, filename := range args[1:] {

		file, err := os.Open(filename)
		if err != nil {
			fmt.Printf("failed open embeded file %q: %v", filename, err)
			os.Exit(1)
		}

		if err := dst.WriteBefore([]byte(pattern), []byte("\""+filename+"\": []byte{\n")); err != nil {
			fmt.Printf("failed write to file %q: %v", filename, err)
			os.Exit(1)
		}

		scanner := bufio.NewScanner(file)
		rowSize := 20
		scanner.Split(func(data []byte, atEOF bool) (advance int, token []byte, err error) {
			if len(data) == 0 {
				return 0, nil, nil
			}
			if atEOF || len(data) < rowSize {
				return len(data), data, nil
			}
			return rowSize, data[0:rowSize], nil
		})

		for scanner.Scan() {
			if err := dst.WriteBefore([]byte(pattern), []byte(bytesDump(scanner.Bytes())+"\n")); err != nil {
				fmt.Printf("failed write to file %q: %v", filename, err)
				os.Exit(1)
			}
		}

		if err := dst.WriteBefore([]byte(pattern), []byte("\n},\n")); err != nil {
			fmt.Printf("failed write to file %q: %v", filename, err)
			os.Exit(1)
		}

		file.Close()

	}

}

func prepareDstFile(filename string, cfg embededFileConfig) error {

	_, err := os.Stat(filename)
	var isNew bool
	if os.IsNotExist(err) {
		isNew = true
	}

	f, err := os.OpenFile(filename, syscall.O_CREAT|syscall.O_RDWR, 0666)
	if err != nil {
		return err
	}
	defer f.Close()

	if isNew {
		err := embededFileTpl.Execute(f, cfg)
		if err != nil {
			return errors.Wrapf(err, "failed write tpl to file %q", filename)
		}
	}
	return nil
}

type embededFileConfig struct {
	Package   string
	FieldName string
}

var embededFileTpl = template.Must(template.New("_genembed.go").Parse(`// Code generated by github.com/gebv/go-embed. DO NOT EDIT.
package {{.Package}}

// {{.FieldName}} list of embeded files.
var {{.FieldName}} = map[string][]byte{
	// [START embededFiles]
	// [END embededFiles]
}
`))

const pattern = "// [END embededFiles]\n"

func bytesDump(in []byte) string {
	buf := new(bytes.Buffer)
	for _, b := range in {
		fmt.Fprintf(buf, "0x%x,", b)
	}
	return buf.String()
}

func gofmt(filePath string) {
	in, err := ioutil.ReadFile(filePath)
	if err != nil {
		fmt.Println("failed read file for formatting:", err)
		os.Exit(1)
	}
	out, err := format.Source(in)
	if err != nil {
		fmt.Println("failed formatting:", err)
		os.Exit(1)
	}
	if err := ioutil.WriteFile(filePath, out, 0644); err != nil {
		fmt.Println("failed write after formatting:", err)
		os.Exit(1)
	}
}
